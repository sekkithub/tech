@charset "UTF-8";
/**
 * #SETTINGS
 */
/*!
 * inuitcss, by @csswizardry
 *
 * github.com/inuitcss | inuitcss.com
 */
/* =======================
   Settings/Global
   ======================= */
/* =======================
   Settings/Colors
   ======================= */
/* =======================
   Settings/Transitions
   ======================= */
/* =======================
   Settings/z-index
   ======================= */
/**
 * #TOOLS
 */
/* =======================
   Tools/Mixins
   ======================= */
/* =======================
   Tools/Aliases
   ======================= */
/**
 * #GENERIC
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*------------------------------------*\
    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/*------------------------------------*\
    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
hr,
table,
fieldset, figure,
pre {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once,here.
 */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

/**
 * #BASE
 */
/*------------------------------------*\
    #PAGE
\*------------------------------------*/
/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  background-color: #fff;
  color: #333;
  overflow-y: scroll;
  /* [2] */
  min-height: 100%;
  /* [3] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -ms-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */ }

/* =======================
   Base/Page
   ======================= */
html {
  background: #444444;
  font-family: 'Varela Round', 'Arial', sans-serif;
  font-weight: 300;
  letter-spacing: 0.04em;
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }
  html.no-scroll {
    width: 100%;
    height: 100%;
    overflow: hidden; }

html, body {
  height: 100%; }

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
/**
 * Headings 1–6.
 */
h1 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h2 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h3 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h4 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5 {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6 {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/* =======================
   Base/Type
   ======================= */
/**
 * Typographical base selectors.
 */
/**
 * Headings 1–6.
 */
h1, h2, h3, h4, h5, h6 {
  font-weight: 300; }

/**
 * A generic heading style which can be applied to any headings.
 */
.heading {
  font-size: 22px;
  font-size: 1.375rem;
  line-height: 1.09091; }

.heading-sub {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
  font-weight: 600;
  margin-bottom: 0; }

/**
 * Emboldened elements.
 */
a,
strong, b,
dt {
  font-weight: 600; }

/**
 * Code-like elements.
 */
code, kbd, samp {
  font-family: Inconsolata, Monaco, Consolas, "Andale Mono", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace; }

pre {
  white-space: pre;
  word-wrap: normal;
  overflow: auto;
  padding: 12px;
  border-radius: 3px; }

/**
 * Horizontal rules.
 */
hr {
  border: none;
  border-bottom: 1px solid #000;
  margin-bottom: 23px; }

/**
 * Highlighted text.
 */
pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit; }

/**
 * Text-alignment.
 */
.text-banner {
  text-align: center; }

/* =======================
   Base/Links
   ======================= */
a {
  color: inherit;
  text-decoration: none; }
  a:hover, a:active, a:focus {
    text-decoration: underline; }

/*------------------------------------*\
    #LISTS
\*------------------------------------*/
/**
 * Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    #IMAGES
\*------------------------------------*/
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none; }

/**
 * #OBJECTS
 */
/*------------------------------------*\
    #WRAPPERS
\*------------------------------------*/
.wrapper {
  height: 100%;
  max-width: 100%;
  margin: 0 auto;
  padding-right: 12px;
  padding-left: 12px; }
  @media screen and (min-width: 45em) {
    .wrapper {
      padding-right: 24px;
      padding-left: 24px; } }

.wrapper--image-map-types {
  padding: 0; }

/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/
/**
 * A simple button object.
 */
/**
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.btn {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  margin: 0;
  /* [4] */
  cursor: pointer;
  /* [5] */
  overflow: visible;
  /* [6] */
  padding: 11px 23px;
  /* [7] */
  background-color: #4a8ec2;
  border: 1px solid #4a8ec2; }
  .btn, .btn:hover, .btn:active, .btn:focus {
    text-decoration: none;
    /* [4] */
    color: #fff; }

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.btn::-moz-focus-inner {
  border: 0;
  padding: 0; }

/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/
/**
 * The inuitcss layout system uses `box-sizing: border-box;` and
 * `display: inline-block;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. Combine the layout items with
 * the widths found in `trumps.widths`.
 */
/**
 * Begin a layout group.
 */
.layout {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -24px; }

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
.layout__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */ }

/**
 * Layouts with no gutters.
 */
.layout--flush {
  margin-left: 0; }
  .layout--flush > .layout__item {
    padding-left: 0; }

/*------------------------------------*\
    #BOX
\*------------------------------------*/
/**
 * The box object simply boxes off content.
 */
/**
 * 1. So we can apply the `.box` class to naturally-inline elements.
 */
.box {
  display: block;
  /* [1] */
  padding: 24px; }
  .box > :last-child {
    margin-bottom: 0; }

/*------------------------------------*\
    #MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 */
.media {
  display: block; }

.media__img {
  float: left;
  margin-right: 24px; }
  .media__img > img {
    display: block; }

.media__body {
  overflow: hidden;
  display: block; }
  .media__body,
  .media__body > :last-child {
    margin-bottom: 0; }

/*------------------------------------*\
    #BLOCK
\*------------------------------------*/
/**
 * The block object simply stacks an image on top of some text-like content.
 */
/**
 * Stacked image-with-text object. A simple abstraction to cover a very commonly
 * occurring design pattern.
 */
.block {
  display: block; }

/**
 * 1. Eliminate whitespace around images.
 */
.block__img {
  vertical-align: middle;
  /* [1] */
  margin-bottom: 24px; }

/**
 * Text-content.
 */
.block__body {
  display: block; }

/**
 * #COMPONENTS
 */
/* =======================
   Components/Pre-loader
   ======================= */
.pre-loader {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000000; }

.pre-loader__wrapper {
  display: block;
  position: relative;
  left: 50%;
  top: 50%;
  width: 100px;
  height: 100px;
  margin: -50px 0 0 -50px;
  border-radius: 50%;
  border: 10px solid transparent;
  border-top-color: #FFF;
  -webkit-animation: spin 1s linear infinite;
          animation: spin 1s linear infinite;
  z-index: 1001; }

@-webkit-keyframes spin {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@keyframes spin {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }
.pre-loader__section {
  position: fixed;
  top: 0;
  width: 100%;
  height: 100%;
  background: #1B1B14;
  z-index: 100;
  -webkit-transform: translateX(0);
      -ms-transform: translateX(0);
          transform: translateX(0); }

/* Loaded */
.loaded-contents .pre-loader {
  visibility: hidden;
  transition: all 0.3s 1s ease; }
.loaded-contents .pre-loader__wrapper {
  opacity: 0;
  transition: all 200ms ease; }
.loaded-contents .pre-loader__section {
  opacity: 0;
  transition: all 0.6s 0.3s cubic-bezier(0.645, 0.045, 0.355, 1); }

/* =======================
   Components/Page Head
   ======================= */
.page-head {
  position: fixed;
  width: 100%;
  height: 70px;
  z-index: 100000000;
  transition: all 200ms ease;
  top: 0; }
  .page-head.hide {
    top: -70px; }

/* =======================
   Components/Site Nav
   ======================= */
.site-nav__home {
  line-height: 70px; }

.site-nav__list {
  background: #1C1C1C;
  list-style: none;
  height: 100%;
  margin: 0;
  position: fixed;
  right: 0;
  top: 0;
  transition: all 0.5s ease;
  -webkit-transform: translate3d(100%, 0, 0) rotateY(0deg);
          transform: translate3d(100%, 0, 0) rotateY(0deg);
  -webkit-transform-origin: 100% 50%;
      -ms-transform-origin: 100% 50%;
          transform-origin: 100% 50%;
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
  width: 300px;
  visibility: visible;
  z-index: 100; }

.site-nav__item {
  display: table;
  height: 60px;
  padding: 0 12px;
  transition: 200ms all ease;
  width: 100%; }
  .site-nav__item:hover {
    background: #333; }

.site-nav__link {
  color: #FFF;
  display: table-cell;
  vertical-align: middle;
  text-transform: uppercase; }
  .site-nav__link:hover {
    text-decoration: none; }

/* =======================
   Components/Hamburger Menu
   ======================= */
.hamburger-menu {
  cursor: pointer;
  float: right;
  height: 36px;
  margin: 16px 0;
  -webkit-transform: rotate(0);
      -ms-transform: rotate(0);
          transform: rotate(0);
  transition: .5s ease-in-out;
  width: 36px; }
  .hamburger-menu.open span:nth-child(1) {
    top: 18px;
    -webkit-transform: rotate(135deg);
        -ms-transform: rotate(135deg);
            transform: rotate(135deg); }
  .hamburger-menu.open span:nth-child(2) {
    opacity: 0;
    left: 15px; }
  .hamburger-menu.open span:nth-child(3) {
    top: 18px;
    -webkit-transform: rotate(-135deg);
        -ms-transform: rotate(-135deg);
            transform: rotate(-135deg); }

.hamburger-menu span {
  display: block;
  position: absolute;
  height: 3px;
  width: 100%;
  background: #FFF;
  border-radius: 9px;
  opacity: 1;
  left: 0;
  -webkit-transform: rotate(0deg);
      -ms-transform: rotate(0deg);
          transform: rotate(0deg);
  transition: .25s ease-in-out; }
  .hamburger-menu span:nth-child(1) {
    top: 7px; }
  .hamburger-menu span:nth-child(2) {
    top: 17px; }
  .hamburger-menu span:nth-child(3) {
    top: 27px; }

/* =======================
   Components/Background Color
   ======================= */
.filter {
  background: #000;
  height: 100%;
  left: 0;
  opacity: 0;
  position: fixed;
  top: 0;
  transition: all 200ms ease;
  width: 100%;
  visibility: hidden;
  z-index: 10000000; }
  .filter.on {
    visibility: visible;
    opacity: 0.5; }

/* =======================
   Components/Controller Switch
   ======================= */
.controller-switch {
  bottom: 24px;
  color: #FFF;
  cursor: pointer;
  font-weight: 600;
  left: 24px;
  position: fixed;
  transition: all 200ms ease;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  z-index: 100000; }
  .controller-switch.switch-off {
    opacity: 0.5; }

/* =======================
   Components/Information Button
   ======================= */
.information-button {
  position: fixed;
  width: 36px;
  height: 36px;
  right: 24px;
  bottom: 24px;
  cursor: pointer;
  transition: all 200ms ease;
  z-index: 1000000; }
  .information-button.hide {
    bottom: -70px; }
  .information-button.on .information-button__wrapper {
    -webkit-transform: rotateY(90deg);
            transform: rotateY(90deg); }
  .information-button:not(.on) .information-button__wrapper {
    -webkit-transform: rotateY(0deg);
            transform: rotateY(0deg); }

.information-button__wrapper {
  height: 36px;
  position: absolute;
  transition: all 600ms cubic-bezier(0.19, 1, 0.22, 1);
  -webkit-transform: rotate(0, 0);
      -ms-transform: rotate(0, 0);
          transform: rotate(0, 0);
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
  width: 36px; }

.information-icon {
  border: 2px solid #FFF;
  height: 36px;
  position: absolute;
  width: 36px; }
  .information-icon:after {
    background: url("/assets/svgs/information-icons.svg") no-repeat 36px 36px;
    content: "";
    height: 100%;
    left: 0px;
    position: absolute;
    top: 0px;
    width: 100%; }
  .information-icon.information-icon--i {
    -webkit-transform: rotateY(0deg) translateZ(16px);
            transform: rotateY(0deg) translateZ(16px); }
    .information-icon.information-icon--i:after {
      background-position: 9px 7px; }
  .information-icon.information-icon--close {
    -webkit-transform: rotateY(-90deg) translateZ(16px);
            transform: rotateY(-90deg) translateZ(16px); }
    .information-icon.information-icon--close:after {
      background-position: 9px -24px; }

/* =======================
   Components/Information Overlay
   ======================= */
.information-overlay {
  color: black;
  display: block;
  position: fixed;
  height: 100%;
  min-height: 100%;
  left: 0;
  top: 0;
  opacity: 0;
  overflow-y: scroll;
  transition: all 200ms ease;
  visibility: hidden;
  width: 100%;
  z-index: 100000; }
  .information-overlay.show {
    opacity: 1;
    visibility: visible; }

/* =======================
   Components/Page Info
   ======================= */
.page-info {
  padding-top: 72px;
  padding-bottom: 72px; }

/* =======================
   Components/Container
   ======================= */
.container {
  background: #42BBA3;
  height: auto;
  min-height: 100%;
  overflow-y: scroll;
  padding-top: 72px;
  padding-bottom: 72px;
  position: relative;
  transition: all 200ms ease;
  width: 100%;
  z-index: 100; }

.container--home {
  height: 100%; }

.container--magnify-lens {
  height: 100%; }

.container--select-box {
  height: 100%; }

.container--image-map-types {
  height: 100%;
  padding: 0; }

/* =======================
   Components/Background Color
   ======================= */
.bg-color--home {
  background: #FF4D5B; }

.bg-color--modules {
  background: #42BBA3; }

.bg-color--magnify-lens {
  background: #E3CD1F; }

.bg-color--peep-holes {
  background: #289BD2; }

.bg-color--sample {
  background: #42BBA3; }

.bg-color--select-box {
  background: #9B7EFF; }

.bg-color--image-map-types {
  background: #444; }

/* =======================
   Components/Arrow
   ======================= */
.arrow {
  height: 70px; }

.arrow--prev {
  -webkit-transform: rotate(180deg);
      -ms-transform: rotate(180deg);
          transform: rotate(180deg);
  transition: all 200ms ease; }
  .arrow--prev:hover {
    -webkit-transform: translateX(-10px) rotate(180deg);
        -ms-transform: translateX(-10px) rotate(180deg);
            transform: translateX(-10px) rotate(180deg); }

.arrow--next {
  transition: all 200ms ease; }
  .arrow--next:hover {
    -webkit-transform: translateX(10px);
        -ms-transform: translateX(10px);
            transform: translateX(10px); }

/* =======================
   Components/Page Link
   ======================= */
.page-link {
  margin-top: -35px;
  position: fixed;
  top: 50%;
  z-index: 1000;
  transition: all 200ms ease; }

.page-link--left {
  left: 24px; }
  .page-link--left.hide {
    -webkit-transform: translateX(-160px);
        -ms-transform: translateX(-160px);
            transform: translateX(-160px); }

.page-link--right {
  right: 24px; }
  .page-link--right.hide {
    -webkit-transform: translateX(160px);
        -ms-transform: translateX(160px);
            transform: translateX(160px); }

.page-link__prev:hover, .page-link__next:hover {
  text-decoration: none; }

.page-link__prev:hover > .arrow--prev {
  -webkit-transform: translateX(-10px) rotate(180deg);
      -ms-transform: translateX(-10px) rotate(180deg);
          transform: translateX(-10px) rotate(180deg); }

.page-link__next:hover > .arrow--next {
  -webkit-transform: translateX(10px);
      -ms-transform: translateX(10px);
          transform: translateX(10px); }

.page-link__title {
  color: #FFF;
  display: inline-block;
  line-height: 1.2;
  max-width: 160px;
  transition: all 200ms ease;
  vertical-align: middle;
  opacity: 0; }
  .page-link__title:hover {
    text-decoration: none; }

.page-link__title--left {
  -webkit-transform: translateX(-200px);
      -ms-transform: translateX(-200px);
          transform: translateX(-200px); }

.page-link__title--right {
  -webkit-transform: translateX(200px);
      -ms-transform: translateX(200px);
          transform: translateX(200px); }

/* =======================
   Components/Page Title
   ======================= */
.page-title {
  text-align: center;
  margin-bottom: 0; }

/* =======================
   Components/Modules
   ======================= */
.modules__list {
  height: 28%;
  margin-bottom: 24px;
  width: 100%;
  list-style: disc; }

.modules__link {
  background-color: #FDEC00;
  display: table;
  height: 100%;
  width: 100%; }
  .modules__link:hover {
    text-decoration: none; }

.modules__figure {
  overflow: hidden;
  position: relative; }

.modules__title {
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  width: 100%;
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

.modules__image {
  transition: all 200ms ease;
  display: block;
  height: auto;
  max-width: 100%; }
  .modules__image:hover {
    opacity: 0.5; }

/* =======================
   Components/Full Height
   ======================= */
.full-height {
  display: table;
  height: auto;
  min-height: 100%;
  width: 100%; }

.full-height__inner {
  display: table-cell;
  vertical-align: middle; }

/* =======================
   Components/Long Contents
   ======================= */
.long-contents {
  position: absolute;
  width: 100%;
  top: 0;
  left: 0;
  padding-left: 24px;
  padding-right: 24px;
  padding-top: 72px;
  padding-bottom: 72px; }

/* =======================
   Components/Magnify
   ======================= */
.magnify {
  cursor: inherit;
  margin: 0 auto;
  position: relative;
  width: 100%;
  max-width: 600px; }
  @media screen and (min-width: 45em) {
    .magnify {
      cursor: none; } }

.magnify__large-image {
  background: url("/assets/images/kampus-icon.jpg") no-repeat;
  border-radius: 100%;
  box-shadow: 0 0 0 3px white;
  display: none;
  height: 240px;
  position: absolute;
  width: 240px; }
  @media screen and (max-width: 44.9375em) {
    .magnify__large-image {
      display: none !important;
      opacity: 0 !important; } }

.magnify__small-image {
  display: none; }
  @media screen and (min-width: 45em) {
    .magnify__small-image {
      display: block; } }

.magnify__mobile {
  display: block; }
  @media screen and (min-width: 45em) {
    .magnify__mobile {
      display: none; } }

/* =======================
   Components/Peep holes
   ======================= */
.peep-holes__dots {
  position: absolute;
  height: 100%;
  z-index: 4;
  width: 100%;
  max-width: 70%;
  top: 50%;
  left: 50%;
  margin: -20% 0 0 -35%; }

.peep-holes__image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0; }

.peep-holes__dot {
  width: 10%;
  padding-top: 6.25%;
  width: calc(8% + 2px);
  padding-top: calc(6.25% + 2px);
  position: relative;
  float: left;
  height: 0;
  overflow: hidden;
  color: #FAF2CB;
  margin: calc(-1px); }

.peep-holes__dot div {
  border-radius: 50%;
  height: 200px;
  width: 200px;
  border: 90px solid;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -100px;
  margin-left: -100px; }

/* =======================
   Components/Select Box
   ======================= */
.s-hidden {
  padding-right: 10px;
  visibility: hidden; }

.select {
  color: black;
  cursor: pointer;
  display: block;
  height: 70px;
  max-width: 50%;
  margin: 0 auto;
  position: relative;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }

.styledSelect {
  bottom: 0;
  background: rgba(255, 255, 255, 0.3);
  border: 2px solid #FFF;
  font-weight: bold;
  left: 0;
  padding: 24px;
  position: absolute;
  right: 0;
  top: 0;
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }
  .styledSelect:after {
    background: url(/assets/svgs/select-box-arrow.svg) no-repeat;
    background-size: 28px;
    content: "";
    height: 19px;
    position: absolute;
    right: 24px;
    top: 28px;
    width: 28px;
    transition: all 200ms ease;
    -webkit-transform-origin: 50% 40%;
        -ms-transform-origin: 50% 40%;
            transform-origin: 50% 40%; }

.styledSelect.active::after {
  -webkit-transform: rotate(-180deg);
      -ms-transform: rotate(-180deg);
          transform: rotate(-180deg); }

.options {
  display: none;
  position: absolute;
  top: 100%;
  right: 0;
  left: 0;
  z-index: 999;
  margin: 0 0;
  margin-bottom: 48px;
  padding: 0 0;
  font-weight: bold;
  list-style: none;
  border: 2px solid #FFF;
  border-top: none;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); }

.options li {
  background: transparent;
  height: 70px;
  padding: 24px;
  font-family: 'Varela Round', 'Arial', sans-serif;
  transition: all 100ms ease;
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }
  .options li:hover {
    background: rgba(255, 255, 255, 0.3); }

/* =======================
   Components/Image Map Types
   ======================= */
#map {
  height: 100%; }

.leaflet-container {
  background: #fff; }

/**
 * #TRUMPS
 */
/*------------------------------------*\
    #CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.clearfix` class appearing
 * over and over in your markup.
 */
.clearfix:after,
.box:after,
.media:after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*\
    #SPACING
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/*------------------------------------*\
    #SPACING-RESPONSIVE
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
/**
 * Headings 1–6’s corresponding Greek-alphabet abstract classes for double-
 * stranded heading hierarchy: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * Use these helper classes to cause other elements to adopt the styling of the
 * respective heading, e.g.:
 *
   <h2 class="alpha">Lorem ipsum</h2>
 *
 */
.alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

.beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

.gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

.delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

.epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

.zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/*------------------------------------*\
    #WIDTHS
\*------------------------------------*/
/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes can take a fraction-like format (e.g. `.u-2/3`) or a spoken-
 * word format (e.g. `.u-2-of-3`). Use these in your markup:
 *
 * <div class="u-7/12">
 */
.u-1\/1 {
  width: 100% !important; }

.u-1\/2 {
  width: 50% !important; }

.u-1\/3 {
  width: 33.33333% !important; }

.u-2\/3 {
  width: 66.66667% !important; }

.u-1\/4 {
  width: 25% !important; }

.u-2\/4 {
  width: 50% !important; }

.u-3\/4 {
  width: 75% !important; }

.u-1\/5 {
  width: 20% !important; }

.u-2\/5 {
  width: 40% !important; }

.u-3\/5 {
  width: 60% !important; }

.u-4\/5 {
  width: 80% !important; }

/*------------------------------------*\
    #WIDTHS-RESPONSIVE
\*------------------------------------*/
/**
 * Responsive width classes based on your responsive settings.
 */
@media screen and (max-width: 44.9375em) {
  .u-1\/1-palm {
    width: 100% !important; }

  .u-1\/2-palm {
    width: 50% !important; }

  .u-1\/3-palm {
    width: 33.33333% !important; }

  .u-2\/3-palm {
    width: 66.66667% !important; }

  .u-1\/4-palm {
    width: 25% !important; }

  .u-2\/4-palm {
    width: 50% !important; }

  .u-3\/4-palm {
    width: 75% !important; }

  .u-1\/5-palm {
    width: 20% !important; }

  .u-2\/5-palm {
    width: 40% !important; }

  .u-3\/5-palm {
    width: 60% !important; }

  .u-4\/5-palm {
    width: 80% !important; } }
@media screen and (min-width: 45em) and (max-width: 63.9375em) {
  .u-1\/1-lap {
    width: 100% !important; }

  .u-1\/2-lap {
    width: 50% !important; }

  .u-1\/3-lap {
    width: 33.33333% !important; }

  .u-2\/3-lap {
    width: 66.66667% !important; }

  .u-1\/4-lap {
    width: 25% !important; }

  .u-2\/4-lap {
    width: 50% !important; }

  .u-3\/4-lap {
    width: 75% !important; }

  .u-1\/5-lap {
    width: 20% !important; }

  .u-2\/5-lap {
    width: 40% !important; }

  .u-3\/5-lap {
    width: 60% !important; }

  .u-4\/5-lap {
    width: 80% !important; } }
@media screen and (min-width: 45em) {
  .u-1\/1-lap-and-up {
    width: 100% !important; }

  .u-1\/2-lap-and-up {
    width: 50% !important; }

  .u-1\/3-lap-and-up {
    width: 33.33333% !important; }

  .u-2\/3-lap-and-up {
    width: 66.66667% !important; }

  .u-1\/4-lap-and-up {
    width: 25% !important; }

  .u-2\/4-lap-and-up {
    width: 50% !important; }

  .u-3\/4-lap-and-up {
    width: 75% !important; }

  .u-1\/5-lap-and-up {
    width: 20% !important; }

  .u-2\/5-lap-and-up {
    width: 40% !important; }

  .u-3\/5-lap-and-up {
    width: 60% !important; }

  .u-4\/5-lap-and-up {
    width: 80% !important; } }
@media screen and (max-width: 63.9375em) {
  .u-1\/1-portable {
    width: 100% !important; }

  .u-1\/2-portable {
    width: 50% !important; }

  .u-1\/3-portable {
    width: 33.33333% !important; }

  .u-2\/3-portable {
    width: 66.66667% !important; }

  .u-1\/4-portable {
    width: 25% !important; }

  .u-2\/4-portable {
    width: 50% !important; }

  .u-3\/4-portable {
    width: 75% !important; }

  .u-1\/5-portable {
    width: 20% !important; }

  .u-2\/5-portable {
    width: 40% !important; }

  .u-3\/5-portable {
    width: 60% !important; }

  .u-4\/5-portable {
    width: 80% !important; } }
@media screen and (min-width: 64em) {
  .u-1\/1-desk {
    width: 100% !important; }

  .u-1\/2-desk {
    width: 50% !important; }

  .u-1\/3-desk {
    width: 33.33333% !important; }

  .u-2\/3-desk {
    width: 66.66667% !important; }

  .u-1\/4-desk {
    width: 25% !important; }

  .u-2\/4-desk {
    width: 50% !important; }

  .u-3\/4-desk {
    width: 75% !important; }

  .u-1\/5-desk {
    width: 20% !important; }

  .u-2\/5-desk {
    width: 40% !important; }

  .u-3\/5-desk {
    width: 60% !important; }

  .u-4\/5-desk {
    width: 80% !important; } }
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
  .u-1\/1-retina {
    width: 100% !important; }

  .u-1\/2-retina {
    width: 50% !important; }

  .u-1\/3-retina {
    width: 33.33333% !important; }

  .u-2\/3-retina {
    width: 66.66667% !important; }

  .u-1\/4-retina {
    width: 25% !important; }

  .u-2\/4-retina {
    width: 50% !important; }

  .u-3\/4-retina {
    width: 75% !important; }

  .u-1\/5-retina {
    width: 20% !important; }

  .u-2\/5-retina {
    width: 40% !important; }

  .u-3\/5-retina {
    width: 60% !important; }

  .u-4\/5-retina {
    width: 80% !important; } }



/*# sourceMappingURL=data:application/json;base64, */
